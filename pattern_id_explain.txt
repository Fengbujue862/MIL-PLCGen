Requirement patterns

Implication (ID: pattern-implication) 
If {1} is true at the end of the PLC cycle, then {2} should always be true at the end of the same cycle.
• Informal requirement: If {1} is true at the end of the PLC cycle, then {2} should always be true at the end of the same cycle. 
• Formal requirement: AG(({PLC_END} AND ({1})) --> ({2})) (type: ctl) 
• Parameters: ◦ {1}: Condition 
◦ {2}: Implication 


Invariant (ID: pattern-invariant)
{1} is always true at the end of the PLC cycle.
• Informal requirement: {1} is always true at the end of the PLC cycle. 
• Formal requirement: AG({PLC_END} --> ({1})) (type: ctl) 
• Parameters: ◦ {1}: Invariant to be respected at the end of each cycle. 


Forbidden state (ID: pattern-forbidden)
It is impossible for {1} to be true at the end of the PLC cycle.
• Informal requirement: {1} is impossible at the end of the PLC cycle. 
• Formal requirement: AG({PLC_END} --> NOT ({1})) (type: ctl) 
• Parameters: ◦ {1}: Condition that must be false at the end of each cycle. 


State change during a cycle (ID: pattern-statechange-duringcycle)
If {1} is true at the beginning of the PLC cycle, then {2} is always true at the end of the same cycle.
• Informal requirement: If {1} is true at the beginning of the PLC cycle, then {2} is always true at the end of the same cycle. 
• Formal requirement: AG(({PLC_START} AND ({1})) --> A[ NOT {PLC_END} U {PLC_END} AND ({2}) ]) (type: ctl) 
• Parameters: ◦ {1}: Condition at start of cycle 
◦ {2}: Expectation at end of cycle 


State change between cycles (ID: pattern-statechange-betweencycles)
If {1} is true at the end of cycle N, and {2} is true at the end of cycle N+1, then {3} is always true at the end of cycle N+1.
• Informal requirement: If {1} is true at the end of cycle N and {2} is true at the end of cycle N+1, then {3} is always true at the end of cycle N+1. 
• Formal requirement: G(({PLC_END} AND ({1}) AND X( [ NOT {PLC_END} U ({PLC_END} AND ({2})) ] )) --> X( [ NOT {PLC_END} U ({PLC_END} AND ({3})) ] )) (type: ltl) 
• Parameters: ◦ {1}: Condition at the end of cycle N 
◦ {2}: Condition at the end of cycle N+1 
◦ {3}: Expectation at the end of cycle N+1 


Reachability (ID: pattern-reachability)
{1} can occur at the end of a cycle.
• Informal requirement: It is possible to have {1} at the end of a cycle. 
• Formal requirement: EF({PLC_END} AND ({1})) (type: ctl) 
• Parameters: ◦ {1}: State to reach 


Repeatability (ID: pattern-repeatability) 
It is always possible that {1} may eventually occur at the end of a cycle.
• Informal requirement: Any time it is possible to have eventually {1} at the end of a cycle. (AG EF) 
• Formal requirement: AG(EF({PLC_END} AND ({1}))) (type: ctl) 
• Parameters: ◦ {1}: State to reach 


Leads to (ID: pattern-leadsto)
If {1} is true at the end of a cycle, then {2} is true at the end of the previous cycle.
• Informal requirement: If {1} is true at the end of a cycle, {2} was true at the end of an earlier cycle. (EU) 
• Formal requirement: NOT (E[({PLC_END} --> NOT ({2})) U ({PLC_END} AND {1})]) (type: ctl) 
• Parameters: ◦ {1}: Consequence 
◦ {2}: Cause 